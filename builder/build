#!/bin/bash

reset

BUILDER_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR=$(dirname $BUILDER_DIR)

function detect_version()
{
    ver=$(awk '/public const string VERSION = /{ print $6 }' < ${ROOT_DIR}/Src/Nerva.Toolkit/Version.cs)
	name=$(awk '/public const string CODE_NAME = /{ print $6 }' < ${ROOT_DIR}/Src/Nerva.Toolkit/Version.cs)
    export APP_VERSION=$(echo ${ver} | tr -d '";')
	export APP_CODENAME=$(echo ${name} | tr -d '";')
    echo App version detected as ${APP_VERSION}: ${APP_CODENAME}
}

function publish()
{
    cd ${ROOT_DIR}
    echo Building $1
    dotnet restore -r $1 --no-cache

    targetFramework=net5.0

    if [ "$1" == "win-x64" ]; then
        targetFramework=${targetFramework}-windows
    fi

    dotnet publish -c release -r $1 -f ${targetFramework} -p:Version=${APP_VERSION} -p:PublishSingleFile=true

    if [ "$1" == "osx-x64" ]; then
        bundle=${ROOT_DIR}/Bin/Nerva.Toolkit.app
        mkdir -p ${bundle}/Contents
        mkdir -p ${bundle}/Contents/MacOS
        mkdir -p ${bundle}/Contents/Resources

        # Generate plist
        plist=$(sed -e "s/{NERVA_VERSION}/${NERVA_VERSION}/" -e "s/{DISPLAY_NAME}/${NERVA_CODENAME}/" ${BUILDER_DIR}/Info.plist.template)
        echo "$plist" > ${bundle}/Contents/Info.plist

        # Copy icons to resources
        cp ${BUILDER_DIR}/logos/nerva-logo-color.icns ${bundle}/Contents/Resources/nerva-logo-color.icns
        cp ${BUILDER_DIR}/logos/nerva-logo-color-2.icns ${bundle}/Contents/Resources/nerva-logo-color-2.icns

        # Copy launcher
        cp ${ROOT_DIR}/Bin/Release/${targetFramework}/osx-x64/publish/* ${bundle}/Contents/MacOS/

        cd ${ROOT_DIR}/Bin
        zip -r ${ROOT_DIR}/Bin/nerva-gui-v${APP_VERSION}_$1.zip ./Nerva.Toolkit.app
    else
        cd ${ROOT_DIR}/Bin
        zip -j ${ROOT_DIR}/Bin/nerva-gui-v${APP_VERSION}_$1.zip ./Release/${targetFramework}/$1/publish/*
    fi
}

detect_version

publish $1
